{"version":3,"sources":["components/create.component.js","App.js","serviceWorker.js","index.js"],"names":["CreateEstimate","props","state","estimate_region","estimate_population","estimate_timeToElapse","estimate_periodType","estimate_reportedCases","estimate_totalHospitalBeds","onChangeEstimateRegion","bind","onChangeEstimatePopulation","onChangeEstimateTimeToElapse","onChangeEstimatePeriodType","onChangeEstimateReportedCases","onChangeEstimateTotalHospitalBeds","onSubmit","e","this","setState","target","value","preventDefault","console","log","newEstimate","axios","post","then","res","data","style","marginTop","className","htmlFor","name","type","id","onChange","required","data-population","data-time-to-elapse","data-period-type","data-reported-cases","data-total-hospital-beds","data-go-estimate","Component","App","path","component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.805c9733.chunk.js","sourcesContent":["import React, {Component} from 'react';\nimport axios from 'axios';\nimport \"bootstrap/dist/css/bootstrap.min.css\";\n\n\nexport default class CreateEstimate extends Component {\n    constructor(props){\n        super(props);\n        this.state = {\n            estimate_region: \"\",\n            estimate_population: \"\",\n            estimate_timeToElapse:\"\",\n            estimate_periodType: \"\",\n            estimate_reportedCases:\"\",\n            estimate_totalHospitalBeds:\"\",\n           \n           \n        }\n        this.onChangeEstimateRegion = this.onChangeEstimateRegion.bind(this);\n        this.onChangeEstimatePopulation = this.onChangeEstimatePopulation.bind(this);\n        this.onChangeEstimateTimeToElapse = this.onChangeEstimateTimeToElapse.bind(this);\n        this.onChangeEstimatePeriodType = this.onChangeEstimatePeriodType.bind(this);\n        this.onChangeEstimateReportedCases = this.onChangeEstimateReportedCases.bind(this);\n        this.onChangeEstimateTotalHospitalBeds = this.onChangeEstimateTotalHospitalBeds.bind(this);\n       \n        this.onSubmit = this.onSubmit.bind(this);\n    }\n    onChangeEstimateRegion(e){\n        this.setState({\n            estimate_region: e.target.value\n        });\n    }\n    onChangeEstimatePopulation(e){\n        this.setState({\n            estimate_population: e.target.value\n        });\n    }\n    onChangeEstimateTimeToElapse(e){\n        this.setState({\n            estimate_timeToElapse: e.target.value\n        });\n    }\n    onChangeEstimatePeriodType(e){\n        this.setState({\n            estimate_periodType: e.target.value\n        });\n    }\n    onChangeEstimateReportedCases(e){\n        this.setState({\n            estimate_reportedCases: e.target.value\n        });\n    }\n    onChangeEstimateTotalHospitalBeds(e){\n        this.setState({\n            estimate_totalHospitalBeds:e.target.value\n        });\n    }\n  \n    onSubmit(e){\n        e.preventDefault();\n        \n\n        console.log(`Form Submitted:`);\n        console.log(`Estimate Region: ${this.state.estimate_region}`);\n        console.log(`Estimate Population: ${this.state.estimate_population}`);\n        console.log(`Estimate TimeToElapse: ${this.state.estimate_timeToElapse}`);\n        console.log(`Estimate PeriodType: ${this.state.estimate_periodType}`);\n        console.log(`Estimate ReportedCases: ${this.state.estimate_reportedCases}`);\n        console.log(`Estimate TotalHospitalBeds: ${this.state.estimate_totalHospitalBeds}`);\n      \n\n        const newEstimate = {\n            estimate_region: this.state.estimate_region,\n            estimate_population: this.state.estimate_population,\n            estimate_timeToElapse: this.state.estimate_timeToElapse,\n            estimate_periodType: this.state.estimate_periodType,\n            estimate_reportedCases: this.state.estimate_reportedCases,\n            estimate_totalHospitalBeds: this.state.estimate_totalHospitalBeds,\n          \n        };\n\n        axios.post('http://localhost:4000/estimates/create', newEstimate).then(res => console.log(res.data));\n\n        this.setState({\n            estimate_region:\"\",\n            estimate_population: \"\",\n            estimate_timeToElapse:\"\",\n            estimate_periodType:\"\",\n            estimate_reportedCases:\"\",\n            estimate_totalHospitalBeds:\"\",\n            \n        })\n    }\n    render(){\n        return(\n            <div style={{marginTop: 2}}>\n                <div className=\"row\">\n                    <div className=\"col-sm-2\"></div>\n                    <div className=\"col-sm-8\">\n                        <h4 className=\"text-center\">Create Estimate</h4><hr/>\n                        <form onSubmit={this.onSubmit}>\n                        <div className=\"form-group row\">\n                            <label className=\"col-sm-5 col-form-label text-justify\" htmlFor=\"region\">Region*</label>\n                            <div className=\"col-sm-7\">\n                            <input className=\"form-control my-2\" name=\"region\"\n                            type=\"text\" id=\"region\"value={this.state.estimate_region} onChange={this.onChangeEstimateRegion}required />\n                            </div>\n                        </div>\n                        <div className=\"form-group row\">\n                            <label className=\"col-sm-5 col-form-label text-justify\" htmlFor=\"population\">Population*</label>\n                            <div className=\"col-sm-7\">\n                            <input className=\"form-control my-2\" name=\"population\"\n                            type=\"number\"id=\"population\" value={this.state.estimate_population} onChange={this.onChangeEstimatePopulation}required data-population />\n                            </div>\n                        </div>\n                        <div className=\"form-group row\">\n                            <label className=\"col-sm-5 col-form-label text-justify\" htmlFor=\"timeToElapse\">Time to Elapse*</label>\n                            <div className=\"col-sm-7\">\n                            <input className=\"form-control my-2\" name=\"timeToElapse\"\n                            type=\"number\"id=\"timeToElapse\" value={this.state.estimate_timeToElapse} onChange={this.onChangeEstimateTimeToElapse}required data-time-to-elapse/>    \n                            </div>\n                        </div>\n                        <div className=\"form-group row\">\n                            <label className=\"col-sm-5 col-form-label text-justify\" htmlFor=\"periodType\">Period Type*</label>\n                            <div className=\"col-sm-7\">\n                                <select className=\"my-2\"  data-period-type name=\"periodType\" id=\"periodType\"value={this.state.estimate_periodType}\n                                onChange={this.onChangeEstimatePeriodType}>\n                                    <option value=\"days\">Days</option>\n                                    <option value=\"weeks\">Weeks</option>\n                                    <option value=\"months\">Months</option>\n                                </select>\n                            </div>\n                        </div>\n                        <div className=\"form-group row\">\n                            <label className=\"col-sm-5 col-form-label text-justify\" htmlFor=\"reportedCases\">Reported Cases*</label>\n                            <div className=\"col-sm-7\">\n                            <input className=\"form-control my-2\" name=\"reportedCases\"\n                            type=\"number\"id=\"reportedCases\" value={this.state.estimate_reportedCases} onChange={this.onChangeEstimateReportedCases}required data-reported-cases/>   \n                            </div>\n                        </div>\n                        <div className=\"form-group row\">\n                            <label className=\"col-sm-5 col-form-label text-justify\" htmlFor=\"totalHospitalBeds\">Total Hospital Beds*</label>\n                            <div className=\"col-sm-7\">\n                            <input className=\"form-control my-2\"id=\"totalHospitalBeds\" name=\"totalHospitalBeds\"\n                            type=\"number\" value={this.state.estimate_totalHospitalBeds} onChange={this.onChangeEstimateTotalHospitalBeds} required data-total-hospital-beds /> \n                             </div>\n                        </div>\n                        <div className=\"row\">\n                            <div className=\"col-sm-12 text-center\">\n                                <input type=\"submit\" className=\"btn btn-primary px-5\" value=\"Estimate\" data-go-estimate/>\n                            </div>\n                        </div>    \n                        </form>\n                    </div>\n                    <div className=\"col-sm-2\"></div> \n                </div>\n                <div className=\"footer my-5 py-2\">\n                    <small className=\"footer-copyright text-center\">&copy;2020 | KingsleyUmujeyan</small>\n                </div>\n            </div>\n        )\n    }\n};","import React,{Component} from 'react';\nimport {BrowserRouter as Router, Route} from 'react-router-dom';\nimport './App.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\n\nimport CreateEstimate from \"./components/create.component\";\n\n\nclass App extends Component {\n  render(){\n    return (\n      <Router>\n          <div className=\"container my-3\">\n            <h1>Novel COVID-19 Estimator</h1>\n            <hr/>\n            <Route path=\"/\" component={CreateEstimate} />\n          </div>\n      </Router>\n    )\n  }\n}\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}
{"version":3,"sources":["components/create.component.js","components/result.component.js","App.js","serviceWorker.js","index.js"],"names":["CreateEstimate","props","state","estimate_region","estimate_population","estimate_timeToElapse","estimate_reportedCases","estimate_totalHospitalBeds","estimate_periodType","onChangeEstimateRegion","bind","onChangeEstimatePopulation","onChangeEstimateTimeToElapse","onChangeEstimateReportedCases","onChangeEstimateTotalHospitalBeds","onChangeEstimatePeriodType","onSubmit","e","this","setState","target","value","preventDefault","console","log","style","marginTop","className","for","name","type","id","onChange","required","data-population","data-time-to-elapse","checked","data-period-type","data-reported-cases","data-total-hospital-beds","data-go-estimate","Component","ResultEstimates","App","path","component","ResultEstimate","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.b6d38cfe.chunk.js","sourcesContent":["import React, {Component} from 'react';\nimport \"../estimator\";\n\nexport default class CreateEstimate extends Component {\n    constructor(props){\n        super(props);\n        this.state = {\n            estimate_region: \"\",\n            estimate_population: \"\",\n            estimate_timeToElapse:\"\",\n            estimate_reportedCases:\"\",\n            estimate_totalHospitalBeds:\"\",\n            estimate_periodType: \"\",\n           \n        }\n        this.onChangeEstimateRegion = this.onChangeEstimateRegion.bind(this);\n        this.onChangeEstimatePopulation = this.onChangeEstimatePopulation.bind(this);\n        this.onChangeEstimateTimeToElapse = this.onChangeEstimateTimeToElapse.bind(this);\n        this.onChangeEstimateReportedCases = this.onChangeEstimateReportedCases.bind(this);\n        this.onChangeEstimateTotalHospitalBeds = this.onChangeEstimateTotalHospitalBeds.bind(this);\n        this.onChangeEstimatePeriodType = this.onChangeEstimatePeriodType.bind(this);\n        this.onSubmit = this.onSubmit.bind(this);\n    }\n    onChangeEstimateRegion(e){\n        this.setState({\n            estimate_region: e.target.value\n        });\n    }\n    onChangeEstimatePopulation(e){\n        this.setState({\n            estimate_population: e.target.value\n        });\n    }\n    onChangeEstimateTimeToElapse(e){\n        this.setState({\n            estimate_timeToElapse: e.target.value\n        });\n    }\n    onChangeEstimateReportedCases(e){\n        this.setState({\n            estimate_reportedCases: e.target.value\n        });\n    }\n    onChangeEstimateTotalHospitalBeds(e){\n        this.setState({\n            estimate_totalHospitalBeds:e.target.value\n        });\n    }\n    onChangeEstimatePeriodType(e){\n        this.setState({\n            estimate_periodType: e.target.value\n        });\n    }\n    onSubmit(e){\n        e.preventDefault();\n        \n\n        console.log(`Form Submitted:`);\n        console.log(`Estimate Region: ${this.state.estimate_region}`);\n        console.log(`Estimate Population: ${this.state.estimate_population}`);\n        console.log(`Estimate TimeToElapse: ${this.state.estimate_timeToElapse}`);\n        console.log(`Estimate ReportedCases: ${this.state.estimate_reportedCases}`);\n        console.log(`Estimate TotalHospitalBeds: ${this.state.estimate_totalHospitalBeds}`);\n        console.log(`Estimate PeriodType: ${this.state.estimate_periodType}`);\n\n       /*const newEstimate = {\n           estimate_region:this.state.estimate_region,\n           estimate_population:this.state.estimate_population,\n           estimate_timeToElapse:this.state.estimate_timeToElapse,\n           estimate_reportedCases:this.state.estimate_reportedCases,\n           estimate_totalHospitalBeds:this.state.estimate_totalHospitalBeds,\n           estimate_periodType:this.state.estimate_periodType\n       }*/\n\n        this.setState({\n            estimate_region:\"\",\n            estimate_population: \"\",\n            estimate_timeToElapse:\"\",\n            estimate_reportedCases:\"\",\n            estimate_totalHospitalBeds:\"\",\n            estimate_periodType:\"\",\n        })\n    }\n    render(){\n        return(\n            <div style={{marginTop: 2}}>\n                <h3>Create Estimate</h3>\n                <form onSubmit={this.onSubmit}>\n                    <div className=\"form-group\">\n                        <label for=\"region\">REGION*</label>\n                        <input className=\"form-control\" name=\"region\"\n                        type=\"text\" id=\"region\"value={this.state.estimate_region} onChange={this.onChangeEstimateRegion}required />\n                    </div>\n                    <div className=\"form-group\">\n                        <label for=\"population\">POPULATION*</label>\n                        <input className=\"form-control\" name=\"population\"\n                        type=\"number\"id=\"population\" value={this.state.estimate_population} onChange={this.onChangeEstimatePopulation}required data-population />\n                    </div>\n                    <div className=\"form-group\">\n                        <label for=\"timeToElapse\">TIME TO ELAPSE*</label>\n                        <input className=\"form-control\" name=\"timeToElapse\"\n                        type=\"number\"id=\"timeToElapse\" value={this.state.estimate_timeToElapse} onChange={this.onChangeEstimateTimeToElapse}required data-time-to-elapse/>\n                    </div>\n                    <div className=\"form-group\">\n                        <div className=\"form-check form-check-inline\">\n                            <input className=\"form-check-input\"\n                            type=\"radio\" id=\"periodTypeDays\" name=\"periodTypes\"\n                            value=\"Days\" checked={this.state.estimate_periodType===\"Days\"}\n                            onChange={this.onChangeEstimatePeriodType}data-period-type />\n                            <label className=\"form-check-label\"for=\"periodTypeDays\">Days</label>\n                        </div>\n                        <div className=\"form-check form-check-inline\">\n                            <input className=\"form-check-input\"\n                            type=\"radio\" id=\"periodTypeWeeks\" name=\"periodTypes\"\n                            value=\"Weeks\" checked={this.state.estimate_periodType===\"Weeks\"}\n                            onChange={this.onChangeEstimatePeriodType}data-period-type />\n                            <label className=\"form-check-label\" for=\"periodTypeWeeks\">Weeks</label>\n                        </div>\n                        <div className=\"form-check form-check-inline\">\n                            <input className=\"form-check-input\" \n                            type=\"radio\" id=\"periodTypeMonths\" name=\"periodTypes\"\n                            value=\"Months\" checked={this.state.estimate_periodType===\"Months\"}\n                            onChange={this.onChangeEstimatePeriodType}data-period-type />\n                            <label className=\"form-check-label\"for=\"periodTypeMonths\">Months</label>\n                        </div>\n                    </div>\n                    <div className=\"form-group\">\n                        <label for=\"reportedCases\">REPORTED CASES*</label>\n                        <input className=\"form-control\"id=\"reportedCases\" name=\"reportedCases\"\n                        type=\"number\" value={this.state.estimate_reportedCases} onChange={this.onChangeEstimateReportedCases}required data-reported-cases />\n                    </div>\n                    <div className=\"form-group\">\n                        <label for=\"totalHospitalBeds\">TOTAL HOSPITAL BEDS*</label>\n                        <input className=\"form-control\"id=\"totalHospitalBeds\" name=\"totalHospitalBeds\"\n                        type=\"number\" value={this.state.estimate_totalHospitalBeds} onChange={this.onChangeEstimateTotalHospitalBeds} required data-total-hospital-beds />\n                    </div>\n                    <div className=\"form-group\">\n                        <input type=\"submit\"value=\"ESTIMATE\" className=\"btn btn-primary\" data-go-estimate/>\n                    </div>\n                </form>\n            </div>\n        )\n    }\n};","import React, {Component} from 'react';\n\nexport default class ResultEstimates extends Component{\n    render(){\n        return(\n            <div>\n                <h2>Result Estimates</h2>\n            </div>\n        )\n    }\n}","import React,{Component} from 'react';\nimport {BrowserRouter as Router, Route} from 'react-router-dom';\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport './App.css';\n\n\nimport CreateEstimate from \"./components/create.component\";\nimport ResultEstimate from \"./components/result.component\";\n\nclass App extends Component {\n  render(){\n    return (\n      <Router>\n          <div className=\"container\">\n            <h1>Novel COVID-19 Estimator</h1>\n            <hr/>\n            <Route path=\"/\" component={CreateEstimate} />\n            <Route path=\"/result\" component={ResultEstimate} />\n          </div>\n      </Router>\n    )\n  }\n}\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}